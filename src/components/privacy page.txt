import { useNavigate } from 'react-router-dom';
import '../assets/css/typing.css';
import { useEffect, useRef, useState } from 'react';

interface BookItem {
  id: number;
  text: string;
}

const TextContainer = () => {
  const [userInput, setUserInput] = useState<string>('');
  const [randomText, setRandomText] = useState<string>('');
  const [lines, setLines] = useState<string[]>([]);
  const [currentLineIndex, setCurrentLineIndex] = useState<number>(0);
  const [currentLine, setCurrentLine] = useState<string>('');
  const [numberOfTyped, setNumberOfTyped] = useState<number>(0);
  const [correctTyped, setCorrectTyped] = useState<number>(0);
  const [timeLeft, setTimeLeft] = useState<number>(0);

  const inputRef = useRef<HTMLInputElement>(null);
  const lineRef = useRef<HTMLDivElement>(null);
  const navigate = useNavigate();

  useEffect(() => {
    const handleBeforeUnload = (event: any) => {
      event.preventDefault();
      event.returnValue = '';
    };
    window.addEventListener('beforeunload', handleBeforeUnload);
    return () => window.removeEventListener('beforeunload', handleBeforeUnload);
  }, []);

  useEffect(() => {
    const item = localStorage.getItem('settingkey');
    if (item !== null) {
      const time = parseFloat(item.slice(-2));
      setTimeLeft(!isNaN(time) ? time : 60);
    } else {
      setTimeLeft(60);
    }
  }, []);

  useEffect(() => {
    if (timeLeft === 0) {
      localStorage.setItem('numberTyped', numberOfTyped.toString());
      localStorage.setItem('correctTyped', correctTyped.toString());
      navigate('../result');
      return;
    }
    const timer = setInterval(() => setTimeLeft(prev => prev - 1), 1000);
    return () => clearInterval(timer);
  }, [timeLeft]);

  useEffect(() => {
    const item = localStorage.getItem('settingkey');
    if (item === null) {
      navigate(-1);
    } else {
      const trimmed = item.trim().slice(0, -2);
      const filename = `data/${trimmed}.json`;

      fetch(`${filename}`)
        .then((response) => response.json() as Promise<BookItem[]>)
        .then((data) => {
          const randomIndex = Math.floor(Math.random() * data.length);
          const text = data[randomIndex].text;
          setRandomText(text);

          const splitLines = text.match(/.{1,60}(\s|$)/g) || [text];
          setLines(splitLines);
          setCurrentLine(splitLines[0]);
        })
        .catch((err) => console.log(err));
    }
  }, []);

  useEffect(() => {
    const handleClick = () => {
      if (inputRef.current) {
        inputRef.current.focus();
      }
    };
    document.addEventListener('click', handleClick);
    return () => document.removeEventListener('click', handleClick);
  }, []);

  useEffect(() => {
    if (lineRef.current) {
      lineRef.current.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }
  }, [currentLineIndex]);

  useEffect(() => {
    let count = 0;
    for (let i = 0; i < currentLine.length; i++) {
      if (currentLine[i] === userInput[i]) count++;
    }
    setCorrectTyped(prev => prev + count); // Cumulative count
  }, [currentLineIndex]);

  const handleInput = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setUserInput(value);
    setNumberOfTyped(prev => prev + 1);

    if (value === currentLine) {
      const nextIndex = currentLineIndex + 1;
      if (nextIndex < lines.length) {
        setCurrentLineIndex(nextIndex);
        setCurrentLine(lines[nextIndex]);
        setUserInput('');
      } else {
        setTimeLeft(0); // Trigger result
      }
    }
  };

  const renderingText = () => {
    return currentLine.split('').map((char, index) => {
      const typedChar = userInput[index];
      let className = 'graycolor';
      if (typedChar === char) className = 'greencolor';
      else if (typedChar !== undefined) className = 'redcolor';
      return (
        <span key={index} className={className}>{char}</span>
      );
    });
  };

  return (
    <>
      <div className='container'>
        <div className='head'>
          <h1>TYPING TEST</h1>
          <h3>TIME: {timeLeft}</h3>
        </div>

        <div className='textarea' ref={lineRef}>
          {renderingText()}
        </div>

        <input
          ref={inputRef}
          type='text'
          value={userInput}
          onChange={handleInput}
          placeholder='start typing'
          autoFocus
          style={{ opacity: 0, position: 'absolute', pointerEvents: 'none' }}
        />
      </div>
    </>
  );
};

export default TextContainer;























import { useNavigate } from 'react-router-dom';
import '../assets/css/typing.css'
interface BookItem{
  id:number;
  text:string;
}
import {useEffect, useRef, useState} from 'react'
const textContainer=()=> {
  
  const [userInput,setUserInput]=useState<string>("")
  const [randomtext,setRandomText]=useState<string>("")
  const [numberoftyped,setNumberOfText]=useState<number>(0)
  const [correctTyped,setCorrectType]=useState<number>(0)

  const [timeleft,setTimeleft]=useState<number>(0)
  const inputref=useRef<HTMLInputElement>(null)
  const conatinerRef=useRef<HTMLInputElement>(null)




  const navigate=useNavigate()


  useEffect(()=>{
    const handleBeforeUnload=(event:any)=>{
      event.preventDefault()
      event.returnValue=''
    }

    window.addEventListener('beforeunload',handleBeforeUnload)

    return ()=>{
      window.removeEventListener('beforeunload',handleBeforeUnload)
    }
  },[])

useEffect(()=>{
  const item =localStorage.getItem('settingkey')
  if(item!==null){
    let time=parseFloat(item.slice(-2))
    if(!isNaN(time)){
      setTimeleft(time)
    }else{
      setTimeleft(60)
    }
  }else{
    setTimeleft(60)
  }
},[])
  
 useEffect(()=>{
  if(timeleft==0){
    localStorage.setItem('numberTyped',numberoftyped.toString())
    localStorage.setItem('correctTyped',correctTyped.toString())
    return
  }
  const timer =setInterval(()=>{
    setTimeleft((prev)=>prev-1)
  },1000)

  return ()=>clearInterval(timer)
 },[timeleft])
  useEffect(()=>{
  const item =localStorage.getItem('settingkey')
    let filename=''
    if(item === null){
      navigate(-1)
    }else{
      const trimmed=item.trim().slice(0,-2)
       filename=`data/${trimmed}.json`;
    }
      
    fetch(`${filename}`)
    .then((response)=>response.json() as Promise<BookItem[]>)
    
    .then((data)=>{
      const randomIndex=Math.floor(Math.random()*data.length)
      const text=data[randomIndex].text
      setRandomText(text)
    })
    .catch((err)=>{
        console.log(err)
    })

  },[])
 

  useEffect(()=>{
    // inputref.current.focus()
    const handleclick=()=>{
      if(inputref.current){
      inputref.current.focus()
      }
    }
    document.addEventListener('click',handleclick);
    return ()=>
    document.removeEventListener('click',handleclick)
  },[])




const handleinput=(e:React.ChangeEvent<HTMLInputElement>)=>{
  setUserInput(e.target.value)
  setNumberOfText((prev)=>prev+1)
}

  //function for rendering text
  
  const renderingText=()=>{
    return randomtext.split("").map((char,index)=>{
      const typedtext=userInput[index];

      let className='graycolor';
      if(typedtext===char){
      className='greencolor';
      }else if (typedtext!==undefined){
        className='redcolor'
      }

      return(
        <span key={index} className={className}>{char}</span>
      )
    })
  }
  let count=0
  useEffect(()=>{
    for (let i = 0; i < randomtext.length; i++) {
      if(randomtext[i]===userInput[i])
      count++
    }
    setCorrectType(count)
   
  },[randomtext,userInput])
useEffect(()=>{
  if(timeleft==0&&userInput.length>0){
    navigate('../result')
  }
},[timeleft])


useEffect(()=>{
  const el=conatinerRef.current
  if(el){
    const overFlowing=el.scrollHeight>el.clientHeight
    const isBottom=el.scrollTop+el.clientHeight>=el.scrollHeight-20


    if(overFlowing&&isBottom){
      el.scrollTop+=20
    }
  }
},[userInput])
   return (
    <>
    <div className='container'>
      <div className='head'>
      <h1>TYPING TEST</h1>
      <h3>TIME:{timeleft}</h3>
      </div>
            
              <div className='textarea' ref={conatinerRef}>
              {renderingText()}

              </div>


            <input ref={inputref} 
            type='text'
            value={userInput}
            onChange={handleinput}
            placeholder='start typing'
            autoFocus
            style={{opacity:0}}
            className='input'
            />
    </div>
    </>
  )
}

export default textContainer